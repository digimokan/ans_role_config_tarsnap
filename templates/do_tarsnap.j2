#!/bin/sh
# vim: set filetype=sh:

################################################################################
# purpose:   do tarsnap backups, restores, and query info
# args/opts: see usage (run with -h option)
# meta:      script installed by ansible {{ role_name | basename }}
################################################################################

# GLOBAL VARS:

# User Selection Options
list_all_archives='false'
show_all_archives='false'
show_single_archive='false'
auto_backup='false'
manual_backup='false'
extract_archive='false'
delete_archive='false'
archive_name=''
backup_paths=''
dry_run=''
keyfile_path=''

print_usage() {
  echo 'USAGE:'
  echo "  $(basename "${0}")  -h"
  echo "  $(basename "${0}")  -l  [-k <keyfile_path>]"
  echo "  $(basename "${0}")  -s  [-k <keyfile_path>]"
  echo "  $(basename "${0}")  -S  -a <archive_name>  [-k <keyfile_path>]"
  echo "  $(basename "${0}")  -b  -p <backup_paths>  -a <archive_name>  [-n]  [-k <keyfile_path>]"
  echo "  $(basename "${0}")  -t"
  echo "  $(basename "${0}")  -x  -a <archive_name>  [-k <keyfile_path>]"
  echo "  $(basename "${0}")  -d  -a <archive_name>  [-k <keyfile_path>]"
  echo 'OPTIONS:'
  echo '  -h, --help'
  echo '      print this help message'
  echo '  -l, --list-all-archives'
  echo '      list all created archives'
  echo '  -s, --show-details-all-archives'
  echo '      show details for all created archives'
  echo '  -S, --show-details-single-archive'
  echo '      show details for a single created archive'
  echo '  -b, --manual-backup'
  echo '      back up specified backup paths to an archive on tarsnap.com'
  echo '  -t, --auto-backup'
  echo '      do auto/periodic backup of dir(s) listed in {{ default_acts_config_file_path }} to archive(s) on tarsnap.com'
  echo '  -x, --fetch-and-extract-archive'
  echo '      fetch specified archive from tarsnap.com and extract to working dir'
  echo '  -d, --delete-archive'
  echo '      delete specified archive from tarsnap.com'
  echo '  -a <archive_name>, --archive-name=<archive_name>'
  echo '      specified archive name'
  echo '  -p <backup_paths>, --backup-paths=<backup_paths>'
  echo "      comma-separated list of dirs (absolute paths, with trailing '/')"
  echo '  -n, --dry-run'
  echo "      do a 'dry-run' of the backup operation"
  echo '  -k <keyfile_path>, --machine-keyfile-path=<keyfile_path>'
  echo "      specify machine keyfile path (default: local machine '{{ default_machine_key_path }}')"
  echo 'EXIT CODES:'
  echo '    0  ok'
  echo '    1  usage, arguments, or options error'
  echo '    5  tarsnap operation error'
  echo '  255  unknown error'
  exit "${1}"
}

get_cmd_opts() {
  while getopts ':hlsSbtxda:p:nk:-:' option; do
    case "${option}" in
      h)  handle_help ;;
      l)  handle_list_all_archives ;;
      s)  handle_show_details_all_archives ;;
      S)  handle_show_details_single_archive ;;
      b)  handle_manual_backup ;;
      t)  handle_auto_backup ;;
      x)  handle_fetch_and_extract_archive ;;
      d)  handle_delete_archive ;;
      a)  handle_archive_name "${OPTARG}" ;;
      p)  handle_backup_paths "${OPTARG}" ;;
      n)  handle_dry_run ;;
      k)  handle_machine_keyfile_path "${OPTARG}" ;;
      -)  LONG_OPTARG="${OPTARG#*=}"
          case ${OPTARG} in
            help)                          handle_help ;;
            help=*)                        handle_illegal_option_arg "${OPTARG}" ;;
            list-all-archives)             handle_list_all_archives ;;
            list-all-archives=*)           handle_illegal_option_arg "${OPTARG}" ;;
            show-details-all-archives)     handle_show_details_all_archives ;;
            show-details-all-archives=*)   handle_illegal_option_arg "${OPTARG}" ;;
            show-details-single-archive)   handle_show_details_single_archive ;;
            show-details-single-archive=*) handle_illegal_option_arg "${OPTARG}" ;;
            manual-backup)                 handle_manual_backup ;;
            manual-backup=*)               handle_illegal_option_arg "${OPTARG}" ;;
            auto-backup)                   handle_auto_backup ;;
            auto-backup=*)                 handle_illegal_option_arg "${OPTARG}" ;;
            fetch-and-extract-archive)     handle_fetch_and_extract_archive ;;
            fetch-and-extract-archive=*)   handle_illegal_option_arg "${OPTARG}" ;;
            delete-archive)                handle_delete_archive ;;
            delete-archive=*)              handle_illegal_option_arg "${OPTARG}" ;;
            archive-name=?*)               handle_archive_name "${LONG_OPTARG}" ;;
            archive-name*)                 handle_missing_option_arg "${OPTARG}" ;;
            backup-paths=?*)               handle_backup_paths "${LONG_OPTARG}" ;;
            backup-paths*)                 handle_missing_option_arg "${OPTARG}" ;;
            dry-run)                       handle_dry_run ;;
            dry-run=*)                     handle_illegal_option_arg "${OPTARG}" ;;
            machine-keyfile-path=?*)       handle_machine_keyfile_path "${LONG_OPTARG}" ;;
            machine-keyfile-path*)         handle_missing_option_arg "${OPTARG}" ;;
            '')                            break ;; # non-option arg starting with '-'
            *)                             handle_unknown_option "${OPTARG}" ;;
          esac ;;
      \?) handle_unknown_option "${OPTARG}" ;;
    esac
  done
}

handle_help() {
  print_usage 0
}

handle_list_all_archives() {
  if [ "${show_all_archives}" = 'true' ] || \
     [ "${show_single_archive}" = 'true' ] || \
     [ "${auto_backup}" = 'true' ] || \
     [ "${manual_backup}" = 'true' ] || \
     [ "${extract_archive}" = 'true' ] || \
     [ "${delete_archive}" = 'true' ]; then
    quit_err_msg_with_help "mutually exclusive options selected" 1
  fi
  list_all_archives='true'
}

handle_show_details_all_archives() {
  if [ "${list_all_archives}" = 'true' ] || \
     [ "${show_single_archive}" = 'true' ] || \
     [ "${auto_backup}" = 'true' ] || \
     [ "${manual_backup}" = 'true' ] || \
     [ "${extract_archive}" = 'true' ] || \
     [ "${delete_archive}" = 'true' ]; then
    quit_err_msg_with_help "mutually exclusive options selected" 1
  fi
  show_all_archives='true'
}

handle_show_details_single_archive() {
  if [ "${list_all_archives}" = 'true' ] || \
     [ "${show_all_archives}" = 'true' ] || \
     [ "${auto_backup}" = 'true' ] || \
     [ "${manual_backup}" = 'true' ] || \
     [ "${extract_archive}" = 'true' ] || \
     [ "${delete_archive}" = 'true' ]; then
    quit_err_msg_with_help "mutually exclusive options selected" 1
  fi
  show_single_archive='true'
}

handle_manual_backup() {
  if [ "${list_all_archives}" = 'true' ] || \
     [ "${show_all_archives}" = 'true' ] || \
     [ "${show_single_archive}" = 'true' ] || \
     [ "${auto_backup}" = 'true' ] || \
     [ "${extract_archive}" = 'true' ] || \
     [ "${delete_archive}" = 'true' ]; then
    quit_err_msg_with_help "mutually exclusive options selected" 1
  fi
  manual_backup='true'
}

handle_auto_backup() {
  if [ "${list_all_archives}" = 'true' ] || \
     [ "${show_all_archives}" = 'true' ] || \
     [ "${show_single_archive}" = 'true' ] || \
     [ "${manual_backup}" = 'true' ] || \
     [ "${extract_archive}" = 'true' ] || \
     [ "${delete_archive}" = 'true' ]; then
    quit_err_msg_with_help "mutually exclusive options selected" 1
  fi
  auto_backup='true'
}

handle_fetch_and_extract_archive() {
  if [ "${list_all_archives}" = 'true' ] || \
     [ "${show_all_archives}" = 'true' ] || \
     [ "${show_single_archive}" = 'true' ] || \
     [ "${auto_backup}" = 'true' ] || \
     [ "${manual_backup}" = 'true' ] || \
     [ "${delete_archive}" = 'true' ]; then
    quit_err_msg_with_help "mutually exclusive options selected" 1
  fi
  extract_archive='true'
}

handle_delete_archive() {
  if [ "${list_all_archives}" = 'true' ] || \
     [ "${show_all_archives}" = 'true' ] || \
     [ "${show_single_archive}" = 'true' ] || \
     [ "${auto_backup}" = 'true' ] || \
     [ "${manual_backup}" = 'true' ] || \
     [ "${extract_archive}" = 'true' ]; then
    quit_err_msg_with_help "mutually exclusive options selected" 1
  fi
  delete_archive='true'
}

handle_archive_name() {
  archive_name="${1}"
}

handle_backup_paths() {
  paths_with_commas="${1}"
  backup_paths=$(echo "${paths_with_commas}" | tr "," " ")
}

handle_dry_run() {
  dry_run='--dry-run '
}

handle_machine_keyfile_path() {
  keyfile_path="${1}"
  if [ ! -f "${keyfile_path}" ]; then
    quit_err_msg_with_help "specified keyfile ${keyfile_path} does not exist" 1
  fi
}

handle_unknown_option() {
  err_msg="unknown option \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

handle_illegal_option_arg() {
  err_msg="illegal argument in \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

handle_missing_option_arg() {
  err_msg="missing argument for option \"${1}\""
  quit_err_msg_with_help "${err_msg}" 1
}

print_err_msg() {
  echo 'ERROR:'
  printf "$(basename "${0}"): %s\\n\\n" "${1}"
}

quit_err_msg_with_help() {
  print_err_msg "${1}"
  print_usage "${2}"
}

do_list_all_machine_archives() {
  list_archives_cmd="tarsnap ${keyfile_path:+--keyfile "$keyfile_path" }--list-archives -v"
  echo "Listing all machine archives with '${list_archives_cmd}'..."
  eval "${list_archives_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg_with_help "tarsnap error attempting to list all archives" 5
  fi
}

do_show_details_all_archives() {
  show_all_archives_cmd="tarsnap ${keyfile_path:+--keyfile "$keyfile_path" }--print-stats -vf '*'"
  echo "Showing details for all machine archives with '${show_all_archives_cmd}'..."
  eval "${show_all_archives_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg_with_help "tarsnap error attempting to show details for all archives" 5
  fi
}

do_show_details_single_archive() {
  if [ "${archive_name}" = '' ]; then
    quit_err_msg_with_help "missing 'archive-name' option" 1
  fi
  show_single_archive_cmd="tarsnap ${keyfile_path:+--keyfile "$keyfile_path" }--print-stats -vf ${archive_name}"
  echo "Showing details for single machine archive with '${show_single_archive_cmd}'..."
  eval "${show_single_archive_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg_with_help "tarsnap error attempting to show details for single archive" 5
  fi
}

do_manual_backup() {
  if [ "${backup_paths}" = '' ]; then
    quit_err_msg_with_help "missing 'backup-paths' option" 1
  fi
  if [ "${archive_name}" = '' ]; then
    quit_err_msg_with_help "missing 'archive-name' option" 1
  fi
  ts_backup_paths=$(echo "${backup_paths}" | tr "," " ")
  manual_backup_cmd="tarsnap -cvf ${keyfile_path:+--keyfile "$keyfile_path" }${archive_name} ${dry_run:-}${ts_backup_paths}"
  echo "Backing up specified paths to an archive on tarsnap.com with '${manual_backup_cmd}'..."
  eval "${manual_backup_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg_with_help "tarsnap error attempting to do manual backup" 5
  fi
}

do_auto_backup() {
  auto_backup_cmd='{{ default_acts_program_path }}'
  if ! [ -x "$(command -v "${auto_backup_cmd}")" ]; then
    quit_err_msg_with_help "auto-backup program ${auto_backup_cmd} does not exist" 1
  fi
  echo "Running auto-backup of {{ default_acts_config_file_path }} dirs to archive(s) on tarsnap.com with '${auto_backup_cmd}'..."
  eval "${auto_backup_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg_with_help "tarsnap error attempting to do auto backup" 5
  fi
}

do_extract_archive() {
  if [ "${archive_name}" = '' ]; then
    quit_err_msg_with_help "missing 'archive-name' option" 1
  fi
  extract_archive_cmd="tarsnap -xvf ${keyfile_path:+--keyfile "$keyfile_path" }${archive_name}"
  echo "Extracting specified archive from tarsnap.com with '${extract_archive_cmd}'..."
  eval "${extract_archive_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg_with_help "tarsnap error attempting to extract archive" 5
  fi
}

do_delete_archive() {
  if [ "${archive_name}" = '' ]; then
    quit_err_msg_with_help "missing 'archive-name' option" 1
  fi
  delete_archive_cmd="tarsnap -dvf ${keyfile_path:+--keyfile "$keyfile_path" }${archive_name}"
  echo "Deleting specified archive on tarsnap.com with '${delete_archive_cmd}'..."
  eval "${delete_archive_cmd}"
  exit_code="${?}"
  if [ "${exit_code}" != 0 ]; then
    quit_err_msg_with_help "tarsnap error attempting to delete archive" 5
  fi
}

main() {
  get_cmd_opts "$@"
  if [ "${list_all_archives}" = 'true' ]; then
    do_list_all_machine_archives "$@"
  elif [ "${show_all_archives}" = 'true' ]; then
    do_show_details_all_archives "$@"
  elif [ "${show_single_archive}" = 'true' ]; then
    do_show_details_single_archive "$@"
  elif [ "${manual_backup}" = 'true' ]; then
    do_manual_backup "$@"
  elif [ "${auto_backup}" = 'true' ]; then
    do_auto_backup "$@"
  elif [ "${extract_archive}" = 'true' ]; then
    do_extract_archive "$@"
  elif [ "${delete_archive}" = 'true' ]; then
    do_delete_archive "$@"
  else
    quit_err_msg_with_help "no valid option selected" 1
  fi
  exit 0
}

main "$@"

